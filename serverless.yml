org: animl
app: animl
service: animl-ingest

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  profile: animl

  iam:
    role:
      managedPolicies:
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      statements:
        - Effect: 'Allow'
          Action:
            - 's3:DeleteObject'
          Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: S3BucketAnimlimagesingestion
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: S3BucketAnimlimagesingestion
                - '/*'
        - Effect: Allow
          Action:
            - sqs:Get*
            - sqs:SendMessage
          Resource:
            - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:animl-batch-ingestion-${opt:stage, self:provider.stage, 'dev'}
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource:
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*

  environment:
    STAGE: ${opt:stage, self:provider.stage, 'dev'}
    APIKEY: '{{resolve:secretsmanager:api-key-${self:provider.stage}:SecretString:apikey}}'


functions:
  IngestImage:
    name: IngestImageLambdaFunction-${opt:stage, self:provider.stage, 'dev'}
    handler: ingest-image/handler.handler
    maximumRetryAttempts: 0
    timeout: 15
    events:
      - s3:
          bucket: animl-images-ingestion-${opt:stage, self:provider.stage, 'dev'}
          event: s3:ObjectCreated:*
          existing: true
    layers:
      - arn:aws:lambda:${self:provider.region}:445285296882:layer:perl-5-26-runtime:12

resources:
  Resources:
    # TODO: break up resources into separate files:
    # https://medium.com/swlh/create-deploy-a-serverless-react-app-to-s3-cloudfront-on-aws-4f83fa605ff0

    # AWS Resources naming conventions in Serverless (for reference):
    # https://www.serverless.com/framework/docs/providers/aws/guide/resources/

    BatchIngestQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: animl-batch-ingestion-${opt:stage, self:provider.stage, 'dev'}

    # Ingestion bucket
    S3BucketAnimlimagesingestion:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: animl-images-ingestion-${opt:stage, self:provider.stage, 'dev'}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # Serving bucket
    S3BucketAnimlimagesserving:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: animl-images-serving-${opt:stage, self:provider.stage, 'dev'}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # Archive bucket
    S3BucketAnimlimagesarchive:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: animl-images-archive-${opt:stage, self:provider.stage, 'dev'}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # Dead letter bucket
    S3BucketAnimlimagesdeadletter:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: animl-images-dead-letter-${opt:stage, self:provider.stage, 'dev'}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # Bucket policy for animl-images-ingestion
    S3BucketPolicyAnimlImagesIngestionBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3BucketAnimlimagesingestion
        PolicyDocument:
          Statement:
            -
              Action:
                - "s3:*"
              Effect: "Allow"
              Resource:
                - "arn:aws:s3:::animl-images-ingestion-${opt:stage, self:provider.stage, 'dev'}/*"
                - "arn:aws:s3:::animl-images-ingestion-${opt:stage, self:provider.stage, 'dev'}"
              Principal:
                AWS: "arn:aws:iam::830244800171:user/animl-base"

    # Lambda Permission grants the bucket permission to invoke the function
    LambdaPermissionAnimlimagesingestion:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt: # grabs function arn
            - IngestImageLambdaFunction
            - Arn
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: arn:aws:s3:::animl-images-ingestion-${opt:stage, self:provider.stage, 'dev'}

    # TODO: SSL certificate for image serving bucket Cloudfront distrobution?
    # only need if we want a custom CNAME
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-viewercertificate.html

    # Origin Access Identity for serving bucket Cloudfront distrobution
    CloudfrontOriginAccessIdentityAnimlimagesserving:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "orign access identity for animl images serving ${opt:stage, self:provider.stage, 'dev'} bucket"

    # Cloudfront distrobution for serving bucket
    # API docs - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-distribution.html
    CloudfrontDistributionAnimlimagesserving:
      DependsOn:
        - S3BucketAnimlimagesserving
        - CloudfrontOriginAccessIdentityAnimlimagesserving
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
          - DomainName: animl-images-serving-${opt:stage, self:provider.stage, 'dev'}.s3.amazonaws.com
            Id: !Ref S3BucketAnimlimagesserving
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                  - ""
                  - - "origin-access-identity/cloudfront/"
                    - !Ref CloudfrontOriginAccessIdentityAnimlimagesserving
          Enabled: 'true'
          Comment: "Cloudfront distro for animl images serving ${opt:stage, self:provider.stage, 'dev'} bucket"
          Logging:
            IncludeCookies: 'false'
            Bucket: animllogs.s3.amazonaws.com
            Prefix: animl-images-serving-${opt:stage, self:provider.stage, 'dev'}
          # Aliases:
          # - mysite.example.com
          # - yoursite.example.com
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            TargetOriginId: !Ref S3BucketAnimlimagesserving
            MinTTL: 86400  # 1 day - perhaps adjust for staging?
            MaxTTL: 31536000  # 1 year
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            # TrustedSigners:
            # - 1234567890EX
            # - 1234567891EX
            ViewerProtocolPolicy: "redirect-to-https"
          # PriceClass: PriceClass_200
          ViewerCertificate:
              CloudFrontDefaultCertificate: 'true'

    # Bucket policy for serving bucket to allow cloudfront to access it
    S3BucketPolicyAnimlImagesServingBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3BucketAnimlimagesserving
        PolicyDocument:
          Statement:
            -
              Action:
                - 's3:GetObject'
              Effect: "Allow"
              Resource:
                - "arn:aws:s3:::animl-images-serving-${opt:stage, self:provider.stage, 'dev'}/*"
                - "arn:aws:s3:::animl-images-serving-${opt:stage, self:provider.stage, 'dev'}"
              Principal:
                AWS:
                  Fn::Join:
                    - ""
                    - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity "
                      - !Ref CloudfrontOriginAccessIdentityAnimlimagesserving

    # SSM Param for ingestion bucket
    SSMParameterAnimlimagesingestionbucket:
      Type: AWS::SSM::Parameter
      Properties:
        Description: Animl images ingestion bucket name
        Name: /images/ingestion-bucket-${opt:stage, self:provider.stage, 'dev'}
        Type: String
        Value: animl-images-ingestion-${opt:stage, self:provider.stage, 'dev'}

    # SSM Param - serving bucket
    SSMParameterAnimlimagesservingbucket:
      Type: AWS::SSM::Parameter
      Properties:
        Description: Animl images serving bucket name
        Name: /images/serving-bucket-${opt:stage, self:provider.stage, 'dev'}
        Type: String
        Value: animl-images-serving-${opt:stage, self:provider.stage, 'dev'}

    # SSM Param - archive bucket
    SSMParameterAnimlimagesarchivebucket:
      Type: AWS::SSM::Parameter
      Properties:
        Description: Animl images archive bucket name
        Name: /images/archive-bucket-${opt:stage, self:provider.stage, 'dev'}
        Type: String
        Value: animl-images-archive-${opt:stage, self:provider.stage, 'dev'}

    # SSM Param - dead-letter bucket
    SSMParameterAnimlimagesdeadletterbucket:
      Type: AWS::SSM::Parameter
      Properties:
        Description: Animl images dead-letter bucket name
        Name: /images/dead-letter-bucket-${opt:stage, self:provider.stage, 'dev'}
        Type: String
        Value: animl-images-dead-letter-${opt:stage, self:provider.stage, 'dev'}

    # SSM Param - serving bucket cloudfront url
    SSMParameterAnimlimagesservingdistrobution:
      Type: AWS::SSM::Parameter
      Properties:
        Description: Animl images serving cloudfront url
        Name: /images/url-${opt:stage, self:provider.stage, 'dev'}
        Type: String
        Value:
          Fn::GetAtt: # grabs cloudfront url
            - CloudfrontDistributionAnimlimagesserving
            - DomainName

custom:
  pythonRequirements:
    dockerizePip: non-linux
    dockerFile: ./ingest-image/Dockerfile
    useDownloadCache: false
    useStaticCache: false
    dockerExtraFiles:
      - -r /output/exiftool/

plugins:
  - serverless-python-requirements
