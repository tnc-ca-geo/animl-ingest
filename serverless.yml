org: animl
app: animl
service: animl-ingest

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  profile: animl
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:DeleteObject'
      Resource:
        - Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: S3BucketAnimldatastaging
        - Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: S3BucketAnimldatastaging
            - '/*'
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
  iamManagedPolicies:
    - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
  environment:
    STAGE: ${opt:stage, self:provider.stage, 'dev'}
    ANIML_API_URL: https://qxtg8jjpqf.execute-api.us-west-2.amazonaws.com/dev/

functions:
  ProcessCamtrapImage:
    name: ProcessCamtrapImageLambdaFunction-${opt:stage, self:provider.stage, 'dev'}
    handler: handler.handler
    # role: arn:aws:iam::719729260530:role/animl-lambda-role # should this be defined in serverless? Move up to service level?
    events:
      - s3:
          bucket: animl-data-staging-${opt:stage, self:provider.stage, 'dev'}
          existing: true
    layers:
      - arn:aws:lambda:${self:provider.region}:445285296882:layer:perl-5-26-runtime:12

resources:
  Resources:
    # TODO: break up resources into separate files: 
    # https://medium.com/swlh/create-deploy-a-serverless-react-app-to-s3-cloudfront-on-aws-4f83fa605ff0

    # AWS Resources naming conventions in Serverless (for reference):
    # https://www.serverless.com/framework/docs/providers/aws/guide/resources/

    # Staging bucket
    S3BucketAnimldatastaging:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: animl-data-staging-${opt:stage, self:provider.stage, 'dev'}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # Production bucket
    S3BucketAnimldataproduction:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: animl-data-production-${opt:stage, self:provider.stage, 'dev'}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # Archive bucket
    S3BucketAnimldataarchive:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: animl-data-archive-${opt:stage, self:provider.stage, 'dev'}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # Bucket policy for animl-data-staging
    S3BucketPolicyAnimlDataStagingBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties: 
        Bucket: 
          Ref: S3BucketAnimldatastaging
        PolicyDocument: 
          Statement: 
            -
              Action: 
                - "s3:*"
              Effect: "Allow"
              Resource:
                - "arn:aws:s3:::animl-data-staging-${opt:stage, self:provider.stage, 'dev'}/*"
                - "arn:aws:s3:::animl-data-staging-${opt:stage, self:provider.stage, 'dev'}"
              Principal:
                AWS: "arn:aws:iam::830244800171:user/animl-base"

    # Lambda Permission grants the bucket permission to invoke the function
    LambdaPermissionAnimldatastaging:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt: # grabs function arn
            - ProcessCamtrapImageLambdaFunction
            - Arn
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: arn:aws:s3:::animl-data-staging-${opt:stage, self:provider.stage, 'dev'}

    # TODO: SSL certificate for production bucket Cloudfront distrobution?
    # only need if we want a custom CNAME
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-viewercertificate.html

    # Origin Access Identity for production bucket Cloudfront distrobution
    CloudfrontOriginAccessIdentityAnimldataproduction:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "orign access identity for animl data production ${opt:stage, self:provider.stage, 'dev'} bucket"

    # Cloudfront distrobution for production bucket
    # API docs - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-distribution.html    
    CloudfrontDistributionAnimldataproduction:
      DependsOn:
        - S3BucketAnimldataproduction
        - CloudfrontOriginAccessIdentityAnimldataproduction
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
          - DomainName: animl-data-production-${opt:stage, self:provider.stage, 'dev'}.s3.amazonaws.com
            Id: !Ref S3BucketAnimldataproduction
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                  - ""
                  - - "origin-access-identity/cloudfront/"
                    - !Ref CloudfrontOriginAccessIdentityAnimldataproduction
          Enabled: 'true'
          Comment: "Cloudfront distro for animl data production ${opt:stage, self:provider.stage, 'dev'} bucket"
          Logging:
            IncludeCookies: 'false'
            Bucket: animllogs.s3.amazonaws.com
            Prefix: animl-data-production-${opt:stage, self:provider.stage, 'dev'}
          # Aliases:
          # - mysite.example.com
          # - yoursite.example.com
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            TargetOriginId: !Ref S3BucketAnimldataproduction
            MinTTL: 86400  # 1 day - perhaps adjust for staging? 
            MaxTTL: 31536000  # 1 year
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            # TrustedSigners:
            # - 1234567890EX
            # - 1234567891EX
            ViewerProtocolPolicy: "redirect-to-https"
          # PriceClass: PriceClass_200
          ViewerCertificate:
              CloudFrontDefaultCertificate: 'true'

    # Bucket policy for production bucket to allow cloudfront to access it
    S3BucketPolicyAnimlDataProductionBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties: 
        Bucket: 
          Ref: S3BucketAnimldataproduction
        PolicyDocument: 
          Statement: 
            -
              Action: 
                - 's3:GetObject'
              Effect: "Allow"
              Resource:
                - "arn:aws:s3:::animl-data-production-${opt:stage, self:provider.stage, 'dev'}/*"
                - "arn:aws:s3:::animl-data-production-${opt:stage, self:provider.stage, 'dev'}"
              Principal:
                AWS:
                  Fn::Join:
                    - ""
                    - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity "
                      - !Ref CloudfrontOriginAccessIdentityAnimldataproduction

custom:
  pythonRequirements:
    dockerizePip: non-linux
    dockerFile: Dockerfile
    useDownloadCache: false
    useStaticCache: false
    dockerExtraFiles:
      - -r /output/exiftool/

plugins:
  - serverless-python-requirements